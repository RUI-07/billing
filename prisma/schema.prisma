// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("POSTGRES_URL")
  directUrl    = env("POSTGRES_URL_NON_POOLING")
  relationMode = "prisma"
}

generator zod {
  provider    = "zod-prisma"
  output      = "../src/zod"
  modelCase   = "camelCase"
  modelSuffix = "Schema"
}

model User {
  id        Int        @id @default(autoincrement()) @db.Integer
  username  String     @unique @db.VarChar(64)
  password  String     @db.Char(60)
  createdAt DateTime   @default(now()) @db.Timestamp(0)
  updatedAt DateTime   @default(now()) @updatedAt @db.Timestamp(0)
  customers Customer[]
  bills     Bill[]

  @@index([username, password])
  @@index([createdAt])
  @@index([updatedAt])
  @@map("user")
}

model Customer {
  id           Int          @id @default(autoincrement()) @db.Integer
  name         String       @db.VarChar(64)
  type         CustomerType
  statsStartAt DateTime     @db.Timestamp(0)
  phone        String?      @db.VarChar(64)
  userId       Int          @db.Integer
  user         User         @relation(fields: [userId], references: [id])
  isDeleted    Boolean      @default(false) @db.Boolean
  createdAt    DateTime     @default(now()) @db.Timestamp(0)
  updatedAt    DateTime     @default(now()) @updatedAt @db.Timestamp(0)
  Bill         Bill[]

  @@index([name])
  @@index([userId])
  @@index([createdAt])
  @@index([updatedAt])
  @@map("customer")
}

model Bill {
  id         Int        @id @default(autoincrement()) @db.Integer
  userId     Int        @db.Integer
  user       User       @relation(fields: [userId], references: [id])
  date       DateTime   @db.Timestamp(0)
  customerId Int        @db.Integer
  customer   Customer   @relation(fields: [customerId], references: [id])
  isDeleted  Boolean    @default(false) @db.Boolean
  createdAt  DateTime   @default(now()) @db.Timestamp(0)
  updatedAt  DateTime   @default(now()) @updatedAt @db.Timestamp(0)
  billItems  BillItem[]
  remark     String?    @db.VarChar()

  @@index([userId])
  @@index([customerId])
  @@index([createdAt])
  @@index([updatedAt])
  @@map("bill")
}

model BillItem {
  id        Int      @id @default(autoincrement()) @db.Integer
  billId    Int      @db.Integer
  bill      Bill     @relation(fields: [billId], references: [id])
  name      String   @db.VarChar(64)
  quantity  Int      @db.Integer
  price     Int      @db.Integer
  total     Int      @db.Integer
  isDeleted Boolean  @default(false) @db.Boolean
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(0)

  @@index([billId])
  @@index([createdAt])
  @@index([updatedAt])
  @@map("bill_item")
}

enum CustomerType {
  Selling
  Purchase
}
